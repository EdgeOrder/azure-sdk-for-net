// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.EdgeOrderPartner.Models;

namespace Azure.ResourceManager.EdgeOrderPartner
{
    /// <summary> The EdgeOrderPartnerManagement service client. </summary>
    public partial class EdgeOrderPartnerManagementOperations
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal EdgeOrderPartnerManagementRestOperations RestClient { get; }

        /// <summary> Initializes a new instance of EdgeOrderPartnerManagementOperations for mocking. </summary>
        protected EdgeOrderPartnerManagementOperations()
        {
        }

        /// <summary> Initializes a new instance of EdgeOrderPartnerManagementOperations. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="apiVersion"> Api Version. </param>
        internal EdgeOrderPartnerManagementOperations(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string subscriptionId, Uri endpoint = null, string apiVersion = "2020-12-01-preview")
        {
            RestClient = new EdgeOrderPartnerManagementRestOperations(clientDiagnostics, pipeline, subscriptionId, endpoint, apiVersion);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> API for linking management resource with inventory. </summary>
        /// <param name="familyIdentifier"> Unique identifier for the product family. </param>
        /// <param name="location"> The location of the resource. </param>
        /// <param name="serialNumber"> The serial number of the device. </param>
        /// <param name="manageLinkRequest"> Links the management resource to the inventory. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> ManageLinkAsync(string familyIdentifier, string location, string serialNumber, ManageLinkRequest manageLinkRequest, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("EdgeOrderPartnerManagementOperations.ManageLink");
            scope.Start();
            try
            {
                return await RestClient.ManageLinkAsync(familyIdentifier, location, serialNumber, manageLinkRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> API for linking management resource with inventory. </summary>
        /// <param name="familyIdentifier"> Unique identifier for the product family. </param>
        /// <param name="location"> The location of the resource. </param>
        /// <param name="serialNumber"> The serial number of the device. </param>
        /// <param name="manageLinkRequest"> Links the management resource to the inventory. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response ManageLink(string familyIdentifier, string location, string serialNumber, ManageLinkRequest manageLinkRequest, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("EdgeOrderPartnerManagementOperations.ManageLink");
            scope.Start();
            try
            {
                return RestClient.ManageLink(familyIdentifier, location, serialNumber, manageLinkRequest, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> This method gets all the operations that are exposed for customer. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<Models.Operation> ListOperationsPartnerAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<Models.Operation>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("EdgeOrderPartnerManagementOperations.ListOperationsPartner");
                scope.Start();
                try
                {
                    var response = await RestClient.ListOperationsPartnerAsync(cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<Models.Operation>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("EdgeOrderPartnerManagementOperations.ListOperationsPartner");
                scope.Start();
                try
                {
                    var response = await RestClient.ListOperationsPartnerNextPageAsync(nextLink, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> This method gets all the operations that are exposed for customer. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<Models.Operation> ListOperationsPartner(CancellationToken cancellationToken = default)
        {
            Page<Models.Operation> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("EdgeOrderPartnerManagementOperations.ListOperationsPartner");
                scope.Start();
                try
                {
                    var response = RestClient.ListOperationsPartner(cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<Models.Operation> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("EdgeOrderPartnerManagementOperations.ListOperationsPartner");
                scope.Start();
                try
                {
                    var response = RestClient.ListOperationsPartnerNextPage(nextLink, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> API for Search inventories. </summary>
        /// <param name="searchInventoriesRequest"> Searches inventories with the given filters and returns in the form of a list. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="searchInventoriesRequest"/> is null. </exception>
        public virtual AsyncPageable<PartnerInventory> SearchInventoriesAsync(SearchInventoriesRequest searchInventoriesRequest, CancellationToken cancellationToken = default)
        {
            if (searchInventoriesRequest == null)
            {
                throw new ArgumentNullException(nameof(searchInventoriesRequest));
            }

            async Task<Page<PartnerInventory>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("EdgeOrderPartnerManagementOperations.SearchInventories");
                scope.Start();
                try
                {
                    var response = await RestClient.SearchInventoriesAsync(searchInventoriesRequest, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<PartnerInventory>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("EdgeOrderPartnerManagementOperations.SearchInventories");
                scope.Start();
                try
                {
                    var response = await RestClient.SearchInventoriesNextPageAsync(nextLink, searchInventoriesRequest, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> API for Search inventories. </summary>
        /// <param name="searchInventoriesRequest"> Searches inventories with the given filters and returns in the form of a list. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="searchInventoriesRequest"/> is null. </exception>
        public virtual Pageable<PartnerInventory> SearchInventories(SearchInventoriesRequest searchInventoriesRequest, CancellationToken cancellationToken = default)
        {
            if (searchInventoriesRequest == null)
            {
                throw new ArgumentNullException(nameof(searchInventoriesRequest));
            }

            Page<PartnerInventory> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("EdgeOrderPartnerManagementOperations.SearchInventories");
                scope.Start();
                try
                {
                    var response = RestClient.SearchInventories(searchInventoriesRequest, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<PartnerInventory> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("EdgeOrderPartnerManagementOperations.SearchInventories");
                scope.Start();
                try
                {
                    var response = RestClient.SearchInventoriesNextPage(nextLink, searchInventoriesRequest, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> API for updating inventory metadata and inventory configuration. </summary>
        /// <param name="familyIdentifier"> Unique identifier for the product family. </param>
        /// <param name="location"> The location of the resource. </param>
        /// <param name="serialNumber"> The serial number of the device. </param>
        /// <param name="manageInventoryMetadataRequest"> Updates inventory metadata and inventory configuration. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="familyIdentifier"/>, <paramref name="location"/>, <paramref name="serialNumber"/>, or <paramref name="manageInventoryMetadataRequest"/> is null. </exception>
        public virtual async Task<EdgeOrderPartnerManagementManageInventoryMetadataOperation> StartManageInventoryMetadataAsync(string familyIdentifier, string location, string serialNumber, ManageInventoryMetadataRequest manageInventoryMetadataRequest, CancellationToken cancellationToken = default)
        {
            if (familyIdentifier == null)
            {
                throw new ArgumentNullException(nameof(familyIdentifier));
            }
            if (location == null)
            {
                throw new ArgumentNullException(nameof(location));
            }
            if (serialNumber == null)
            {
                throw new ArgumentNullException(nameof(serialNumber));
            }
            if (manageInventoryMetadataRequest == null)
            {
                throw new ArgumentNullException(nameof(manageInventoryMetadataRequest));
            }

            using var scope = _clientDiagnostics.CreateScope("EdgeOrderPartnerManagementOperations.StartManageInventoryMetadata");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.ManageInventoryMetadataAsync(familyIdentifier, location, serialNumber, manageInventoryMetadataRequest, cancellationToken).ConfigureAwait(false);
                return new EdgeOrderPartnerManagementManageInventoryMetadataOperation(_clientDiagnostics, _pipeline, RestClient.CreateManageInventoryMetadataRequest(familyIdentifier, location, serialNumber, manageInventoryMetadataRequest).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> API for updating inventory metadata and inventory configuration. </summary>
        /// <param name="familyIdentifier"> Unique identifier for the product family. </param>
        /// <param name="location"> The location of the resource. </param>
        /// <param name="serialNumber"> The serial number of the device. </param>
        /// <param name="manageInventoryMetadataRequest"> Updates inventory metadata and inventory configuration. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="familyIdentifier"/>, <paramref name="location"/>, <paramref name="serialNumber"/>, or <paramref name="manageInventoryMetadataRequest"/> is null. </exception>
        public virtual EdgeOrderPartnerManagementManageInventoryMetadataOperation StartManageInventoryMetadata(string familyIdentifier, string location, string serialNumber, ManageInventoryMetadataRequest manageInventoryMetadataRequest, CancellationToken cancellationToken = default)
        {
            if (familyIdentifier == null)
            {
                throw new ArgumentNullException(nameof(familyIdentifier));
            }
            if (location == null)
            {
                throw new ArgumentNullException(nameof(location));
            }
            if (serialNumber == null)
            {
                throw new ArgumentNullException(nameof(serialNumber));
            }
            if (manageInventoryMetadataRequest == null)
            {
                throw new ArgumentNullException(nameof(manageInventoryMetadataRequest));
            }

            using var scope = _clientDiagnostics.CreateScope("EdgeOrderPartnerManagementOperations.StartManageInventoryMetadata");
            scope.Start();
            try
            {
                var originalResponse = RestClient.ManageInventoryMetadata(familyIdentifier, location, serialNumber, manageInventoryMetadataRequest, cancellationToken);
                return new EdgeOrderPartnerManagementManageInventoryMetadataOperation(_clientDiagnostics, _pipeline, RestClient.CreateManageInventoryMetadataRequest(familyIdentifier, location, serialNumber, manageInventoryMetadataRequest).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
