// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.ResourceManager.EdgeOrderPartner.Models
{
    internal static partial class StageNameExtensions
    {
        public static string ToSerialString(this StageName value) => value switch
        {
            StageName.DeviceOrdered => "DeviceOrdered",
            StageName.DevicePrepared => "DevicePrepared",
            StageName.PickedUp => "PickedUp",
            StageName.AtAzureDC => "AtAzureDC",
            StageName.DataCopy => "DataCopy",
            StageName.Completed => "Completed",
            StageName.CompletedWithErrors => "CompletedWithErrors",
            StageName.Cancelled => "Cancelled",
            StageName.Aborted => "Aborted",
            StageName.Current => "Current",
            StageName.CompletedWithWarnings => "CompletedWithWarnings",
            StageName.ReadyToDispatchFromAzureDC => "ReadyToDispatchFromAzureDC",
            StageName.ReadyToReceiveAtAzureDC => "ReadyToReceiveAtAzureDC",
            StageName.Placed => "Placed",
            StageName.InReview => "InReview",
            StageName.Confirmed => "Confirmed",
            StageName.ReadyForDispatch => "ReadyForDispatch",
            StageName.Shipped => "Shipped",
            StageName.Delivered => "Delivered",
            StageName.InUse => "InUse",
            _ => throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown StageName value.")
        };

        public static StageName ToStageName(this string value)
        {
            if (string.Equals(value, "DeviceOrdered", StringComparison.InvariantCultureIgnoreCase)) return StageName.DeviceOrdered;
            if (string.Equals(value, "DevicePrepared", StringComparison.InvariantCultureIgnoreCase)) return StageName.DevicePrepared;
            if (string.Equals(value, "PickedUp", StringComparison.InvariantCultureIgnoreCase)) return StageName.PickedUp;
            if (string.Equals(value, "AtAzureDC", StringComparison.InvariantCultureIgnoreCase)) return StageName.AtAzureDC;
            if (string.Equals(value, "DataCopy", StringComparison.InvariantCultureIgnoreCase)) return StageName.DataCopy;
            if (string.Equals(value, "Completed", StringComparison.InvariantCultureIgnoreCase)) return StageName.Completed;
            if (string.Equals(value, "CompletedWithErrors", StringComparison.InvariantCultureIgnoreCase)) return StageName.CompletedWithErrors;
            if (string.Equals(value, "Cancelled", StringComparison.InvariantCultureIgnoreCase)) return StageName.Cancelled;
            if (string.Equals(value, "Aborted", StringComparison.InvariantCultureIgnoreCase)) return StageName.Aborted;
            if (string.Equals(value, "Current", StringComparison.InvariantCultureIgnoreCase)) return StageName.Current;
            if (string.Equals(value, "CompletedWithWarnings", StringComparison.InvariantCultureIgnoreCase)) return StageName.CompletedWithWarnings;
            if (string.Equals(value, "ReadyToDispatchFromAzureDC", StringComparison.InvariantCultureIgnoreCase)) return StageName.ReadyToDispatchFromAzureDC;
            if (string.Equals(value, "ReadyToReceiveAtAzureDC", StringComparison.InvariantCultureIgnoreCase)) return StageName.ReadyToReceiveAtAzureDC;
            if (string.Equals(value, "Placed", StringComparison.InvariantCultureIgnoreCase)) return StageName.Placed;
            if (string.Equals(value, "InReview", StringComparison.InvariantCultureIgnoreCase)) return StageName.InReview;
            if (string.Equals(value, "Confirmed", StringComparison.InvariantCultureIgnoreCase)) return StageName.Confirmed;
            if (string.Equals(value, "ReadyForDispatch", StringComparison.InvariantCultureIgnoreCase)) return StageName.ReadyForDispatch;
            if (string.Equals(value, "Shipped", StringComparison.InvariantCultureIgnoreCase)) return StageName.Shipped;
            if (string.Equals(value, "Delivered", StringComparison.InvariantCultureIgnoreCase)) return StageName.Delivered;
            if (string.Equals(value, "InUse", StringComparison.InvariantCultureIgnoreCase)) return StageName.InUse;
            throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown StageName value.");
        }
    }
}
